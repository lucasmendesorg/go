/*
	Sort in Go
		Written by Lucas Mendes <lucas AT lucasmendes.org>
*/

package main

import "fmt"
import "math/rand"

func swapArrayIndexes(a *[]int, indexA int, indexB int) {
		x := (*a)[indexA]
		y := (*a)[indexB]
		(*a)[indexA] = y
		(*a)[indexB] = x
}

func sortArrayAscending2(a *[]int) {
	for done, l := false, len(*a) - 1; done == false; {
		done = true
		for i := 0; i < l; i++ {
			if (*a)[i + 1] < (*a)[i] {
				swapArrayIndexes(a, i, i + 1)
				done = false
			}
		}
	}
}

func sortArrayAscendingRecursive(a *[]int, current int, limit int) bool {
	if current == limit {
		return true
	}
	arr := *a
	if arr[current + 1] < arr[current] {
		swapArrayIndexes(a, current, current + 1)
		return sortArrayAscendingRecursive(a, 0, limit)
	}
	current++
	return sortArrayAscendingRecursive(a, current, limit)
}

func sortArrayAscending(a *[]int) {
	for done := false; done == false; {
		done = true
		for i := len(*a) - 2; i >= 0; i-- {
			if (*a)[i + 1] < (*a)[i] {
				swapArrayIndexes(a, i, i + 1)
				done = false
			}
		}
	}
}

func sortArrayDescending(a *[]int) {
	for done := false; done == false; {
		l := len(*a) - 1
		done = true
		for i := 0; i < l; i++ {
			if (*a)[i + 1] > (*a)[i] {
				swapArrayIndexes(a, i, i + 1)
				done = false
			}
		}
	}
}

func createRandomArray(length uint) []int {
	a := make([]int, length)
	for i := uint(0); i < length; i++ {
		a[i] = rand.Intn(100)
	}
	return a
}

func doSortDescending() {
	fmt.Println("--- sortArrayDescending ---")
	a := createRandomArray(32)
	fmt.Println("before: a =", a)
	sortArrayDescending(&a)
	fmt.Println(" after: a =", a)
}

func doSortAscending2() {
	fmt.Println("--- sortArrayAscending2 ---")
	a := createRandomArray(32)
	fmt.Println("before: b =", a)
	sortArrayAscending2(&a)
	fmt.Println(" after: b =", a)
}

func doSortAscending() {
	fmt.Println("--- sortArrayAscending ---")
	a := createRandomArray(32)
	fmt.Println("before: a =", a)
	sortArrayAscending(&a)
	fmt.Println(" after: a =", a)
}

func doSortAscendingRecursive() {
	fmt.Println("--- sortArrayAscendingRecursive ---")
	a := createRandomArray(32)
	fmt.Println("before: a =", a)
	sortArrayAscendingRecursive(&a, 0, len(a) - 1)
	fmt.Println(" after: a =", a)
	
}

func main() {
	doSortAscendingRecursive()
	doSortAscending()
	doSortAscending2()
	doSortDescending()
}
